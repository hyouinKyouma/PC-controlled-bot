
pc_controled_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c8  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000008be  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000277  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000044e  00000000  00000000  00000d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000001e0  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000022c  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000005ca  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000b8  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  74:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <forward>:



void forward()
{
	PD2ON;
  7c:	92 9a       	sbi	0x12, 2	; 18
	PD3OFF;
  7e:	93 98       	cbi	0x12, 3	; 18
	PD4ON;
  80:	94 9a       	sbi	0x12, 4	; 18
	PD5OFF;
  82:	95 98       	cbi	0x12, 5	; 18
  84:	08 95       	ret

00000086 <backward>:
}

void backward()
{
	PD2OFF;
  86:	92 98       	cbi	0x12, 2	; 18
	PD3ON;
  88:	93 9a       	sbi	0x12, 3	; 18
	PD4OFF;
  8a:	94 98       	cbi	0x12, 4	; 18
	PD5ON;
  8c:	95 9a       	sbi	0x12, 5	; 18
  8e:	08 95       	ret

00000090 <left>:
}

void left()
{
	PD2OFF;
  90:	92 98       	cbi	0x12, 2	; 18
	PD3OFF;
  92:	93 98       	cbi	0x12, 3	; 18
	PD4ON;
  94:	94 9a       	sbi	0x12, 4	; 18
	PD5OFF;
  96:	95 98       	cbi	0x12, 5	; 18
  98:	08 95       	ret

0000009a <right>:
}
void right()
{
	PD2ON;
  9a:	92 9a       	sbi	0x12, 2	; 18
	PD3OFF;
  9c:	93 98       	cbi	0x12, 3	; 18
	PD4OFF;
  9e:	94 98       	cbi	0x12, 4	; 18
	PD5OFF;
  a0:	95 98       	cbi	0x12, 5	; 18
  a2:	08 95       	ret

000000a4 <stop>:
	PD4OFF;
	PD5ON;
}
void stop()
{
	PD2OFF;
  a4:	92 98       	cbi	0x12, 2	; 18
	PD3OFF;
  a6:	93 98       	cbi	0x12, 3	; 18
	PD4OFF;
  a8:	94 98       	cbi	0x12, 4	; 18
	PD5OFF;
  aa:	95 98       	cbi	0x12, 5	; 18
  ac:	08 95       	ret

000000ae <rx>:
	}
}
char rx()
{
	char a;
	while(check_RXC);
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <rx>
	a=UDR;
  b2:	8c b1       	in	r24, 0x0c	; 12
	RXC_reset;
  b4:	5f 9a       	sbi	0x0b, 7	; 11
	return a;
}
  b6:	08 95       	ret

000000b8 <main>:
#include <atmega/dcmotor.h>
#include <atmega/USART.h>

int main(void)
{	
	DDRD=0XFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	81 bb       	out	0x11, r24	; 17
	
	baudX2;
  bc:	59 9a       	sbi	0x0b, 1	; 11
	RXON;
  be:	54 9a       	sbi	0x0a, 4	; 10
	TXON;
  c0:	53 9a       	sbi	0x0a, 3	; 10
	initialize_UCSRC;
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	80 bd       	out	0x20, r24	; 32
#define TXC_reset UCSRA|=(1<<TXC)


void baud_rate(int rate)
{
	UBRRH=0x00;
  c6:	10 bc       	out	0x20, r1	; 32
	{
		UBRRL=0X05;
	}
	else if(rate==4800)
	{
		UBRRL=0X0C;
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	89 b9       	out	0x09, r24	; 9
	baud_rate(4800);
	
	char a;
	while(1)
	{
		a=rx();
  cc:	0e 94 57 00 	call	0xae	; 0xae <rx>
		if (a=='w'||a=='W')
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	87 35       	cpi	r24, 0x57	; 87
  d4:	19 f4       	brne	.+6      	; 0xdc <main+0x24>
		{
			forward();
  d6:	0e 94 3e 00 	call	0x7c	; 0x7c <forward>
  da:	f8 cf       	rjmp	.-16     	; 0xcc <main+0x14>
		}
		else if (a=='a'||a=='A')
  dc:	81 34       	cpi	r24, 0x41	; 65
  de:	19 f4       	brne	.+6      	; 0xe6 <main+0x2e>
		{
			left();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <left>
  e4:	f3 cf       	rjmp	.-26     	; 0xcc <main+0x14>
			
		}
		else if (a=='d'||a=='D')
  e6:	84 34       	cpi	r24, 0x44	; 68
  e8:	19 f4       	brne	.+6      	; 0xf0 <main+0x38>
		{
			right();
  ea:	0e 94 4d 00 	call	0x9a	; 0x9a <right>
  ee:	ee cf       	rjmp	.-36     	; 0xcc <main+0x14>
			
		}
		else if(a=='s'||a=='S')
  f0:	83 35       	cpi	r24, 0x53	; 83
  f2:	19 f4       	brne	.+6      	; 0xfa <main+0x42>
		{
			backward();
  f4:	0e 94 43 00 	call	0x86	; 0x86 <backward>
  f8:	e9 cf       	rjmp	.-46     	; 0xcc <main+0x14>
		}
		else  // if(a=='s'||a=='S')
		{
			stop();
  fa:	0e 94 52 00 	call	0xa4	; 0xa4 <stop>
  fe:	e6 cf       	rjmp	.-52     	; 0xcc <main+0x14>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
